plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.example.water_slosher_wearos" // Make sure this matches your actual namespace if different
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // Configuration for CMake integration
    externalNativeBuild {
        // Tells Gradle to use CMake for the native build
        cmake {
            // Path to your CMakeLists.txt file, relative to this build.gradle file
            // Assuming your CMakeLists.txt is in project_root/src/
            path '../../src/CMakeLists.txt'

            // Specifies the version of CMake to use (optional, but recommended)
            // Ensure this version is available in your Android SDK Manager -> SDK Tools
            // Example: '3.18.1' or '3.22.1'
            version '3.22.1'
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.water_slosher_wearos" // Make sure this matches your actual app ID if different
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
            // Consider adding ProgGuard rules for native code if needed for release builds
            // minifyEnabled false
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

// Ensure dependencies block exists (add if missing)
dependencies {
    // REMOVED: implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // Add other dependencies here if needed
}